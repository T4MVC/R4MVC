using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.Extensions.Options;
using R4Mvc.Tools.Extensions;
using R4Mvc.Tools.Services;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace R4Mvc.Tools
{
    public class R4MvcGenerator
    {
        private readonly IControllerRewriterService _controllerRewriter;
        private readonly IControllerGeneratorService _controllerGenerator;
        private readonly IStaticFileGeneratorService _staticFileGenerator;
        private readonly IFilePersistService _filePersistService;
        private readonly IViewLocatorService _viewLocator;
        private readonly Settings _settings;

        private static readonly string[] pragmaCodes = { "1591", "3008", "3009", "0108" };

        public const string R4MvcFileName = "R4Mvc.generated.cs";

        private const string _headerText =
@"// <auto-generated />
// This file was generated by a R4Mvc.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the r4mvc.json file (i.e. the settings file), save it and rebuild.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress ""Foo hides inherited member Foo.Use the new keyword if hiding was intended."" when a controller and its abstract parent are both processed";

        public R4MvcGenerator(
            IControllerRewriterService controllerRewriter,
            IControllerGeneratorService controllerGenerator,
            IStaticFileGeneratorService staticFileGenerator,
            IFilePersistService filePersistService,
            IViewLocatorService viewLocator,
            IOptions<Settings> settings)
        {
            _controllerRewriter = controllerRewriter;
            _controllerGenerator = controllerGenerator;
            _staticFileGenerator = staticFileGenerator;
            _filePersistService = filePersistService;
            _viewLocator = viewLocator;
            _settings = settings.Value;
        }


        public void Generate(CSharpCompilation compilation, string projectRoot)
        {
            var mvcMethodNames = BuildAspNetMvcControllerMethodNames(compilation);

            // create static MVC class and add controller fields 
            var mvcStaticClass = ClassDeclaration(_settings.HelpersPrefix)
                .WithModifiers(SyntaxKind.PublicKeyword, SyntaxKind.StaticKeyword, SyntaxKind.PartialKeyword)
                .WithGeneratedNonUserCodeAttributes();

            // R4MVC namespace used for the areas and Dummy class
            var r4Namespace = NamespaceDeclaration(ParseName(_settings.R4MvcNamespace))
                // add the dummy class using in the derived controller partial class
                .WithDummyClass();
            var areaClasses = new Dictionary<string, ClassDeclarationSyntax>();

            var controllers = _controllerRewriter.RewriteControllers(compilation, mvcMethodNames);
            var namespaceGroups = controllers.GroupBy(c => c.Namespace);
            var rootControllerNames = controllers.Where(c => string.IsNullOrEmpty(c.Area)).Select(c => c.Name).ToArray();
            var allViewFiles = _viewLocator.FindViews(projectRoot);
            var generatedControllers = new List<NamespaceDeclarationSyntax>();
            foreach (var nameGroup in namespaceGroups)
            {
                var namespaceNode = NamespaceDeclaration(ParseName(nameGroup.Key));

                foreach (var controller in nameGroup)
                {
                    var areaKey = rootControllerNames.Contains(controller.Area)
                         ? controller.Area + "Area"
                         : controller.Area;
                    var genControllerClass = _controllerGenerator.GeneratePartialController(controller.Symbol, areaKey, controller.Area, controller.Name, projectRoot, mvcMethodNames);
                    var r4ControllerClass = _controllerGenerator.GenerateR4Controller(controller.Symbol, mvcMethodNames);

                    namespaceNode = namespaceNode
                        .AddMembers(genControllerClass, r4ControllerClass);
                    if (_settings.SplitIntoMutipleFiles)
                    {
                        var controllerFile = NewCompilationUnit()
                            .AddMembers(namespaceNode);
                        CompleteAndWriteFile(controllerFile, controller.GetFilePath().TrimEnd(".cs") + ".generated.cs");
                        namespaceNode = NamespaceDeclaration(ParseName(nameGroup.Key));
                    }

                    if (!string.IsNullOrEmpty(controller.Area))
                    {
                        if (!areaClasses.ContainsKey(controller.Area))
                        {
                            string areaClass = controller.Area + "AreaClass";
                            areaClasses[controller.Area] = ClassDeclaration(areaClass).WithModifiers(SyntaxKind.PublicKeyword);
                            // change to field and property
                            mvcStaticClass = mvcStaticClass.AddMembers(
                                SyntaxNodeHelpers.CreateFieldWithDefaultInitializer("s_" + areaKey, areaClass, SyntaxKind.StaticKeyword, SyntaxKind.ReadOnlyKeyword),
                                SyntaxNodeHelpers.CreateProperty(areaKey, areaClass, IdentifierName("s_" + areaKey), SyntaxKind.PublicKeyword, SyntaxKind.StaticKeyword));
                        }

                        areaClasses[controller.Area] = areaClasses[controller.Area].AddMembers(
                            SyntaxNodeHelpers.CreateFieldWithDefaultInitializer(
                                controller.Name,
                                $"{nameGroup.Key}.{genControllerClass.Identifier}",
                                $"{nameGroup.Key}.{r4ControllerClass.Identifier}",
                                SyntaxKind.PublicKeyword,
                                SyntaxKind.ReadOnlyKeyword));
                    }
                    else
                    {
                        mvcStaticClass = mvcStaticClass.AddMembers(
                            SyntaxNodeHelpers.CreateFieldWithDefaultInitializer(
                                controller.Name,
                                $"{nameGroup.Key}.{genControllerClass.Identifier}",
                                $"{nameGroup.Key}.{r4ControllerClass.Identifier}",
                                SyntaxKind.PublicKeyword,
                                SyntaxKind.StaticKeyword,
                                SyntaxKind.ReadOnlyKeyword));
                    }
                }

                if (!_settings.SplitIntoMutipleFiles)
                    generatedControllers.Add(namespaceNode);
            }
            var views = _viewLocator.FindViews(projectRoot)
                .GroupBy(v => new { v.AreaName, v.ControllerName });
            foreach (var viewSet in views)
            {
                if (controllers.Any(c => c.Area == viewSet.Key.AreaName && c.Name == viewSet.Key.ControllerName))
                    continue;

                var className = !string.IsNullOrEmpty(viewSet.Key.AreaName)
                    ? $"{viewSet.Key.AreaName}Area_{viewSet.Key.ControllerName}ControllerClass"
                    : $"{viewSet.Key.ControllerName}ControllerClass";
                var controllerClass = ClassDeclaration(className)
                    .WithModifiers(SyntaxKind.PublicKeyword)
                    .WithViewsClass(viewSet.Key.ControllerName, viewSet.Key.AreaName, viewSet);
                r4Namespace = r4Namespace.AddMembers(controllerClass);

                if (!string.IsNullOrEmpty(viewSet.Key.AreaName))
                {
                    areaClasses[viewSet.Key.AreaName] = areaClasses[viewSet.Key.AreaName].AddMembers(
                        SyntaxNodeHelpers.CreateFieldWithDefaultInitializer(
                            viewSet.Key.ControllerName,
                            $"{_settings.R4MvcNamespace}.{className}",
                            $"{_settings.R4MvcNamespace}.{className}",
                            SyntaxKind.PublicKeyword,
                            SyntaxKind.ReadOnlyKeyword));
                }
                else
                {
                    mvcStaticClass = mvcStaticClass.AddMembers(
                        SyntaxNodeHelpers.CreateFieldWithDefaultInitializer(
                            viewSet.Key.ControllerName,
                            $"{_settings.R4MvcNamespace}.{className}",
                            $"{_settings.R4MvcNamespace}.{className}",
                            SyntaxKind.PublicKeyword,
                            SyntaxKind.StaticKeyword,
                            SyntaxKind.ReadOnlyKeyword));
                }

            }

            r4Namespace = r4Namespace.AddMembers(areaClasses.Values.ToArray());

            var staticFileNode = _staticFileGenerator.GenerateStaticFiles(projectRoot);

            var actionResultClass = ClassDeclaration(Constants.ActionResultClass)
                .WithModifiers(SyntaxKind.InternalKeyword, SyntaxKind.PartialKeyword)
                .WithBaseTypes("ActionResult", "IR4MvcActionResult")
                .AddMembers(ConstructorDeclaration(Constants.ActionResultClass)
                    .WithModifiers(SyntaxKind.PublicKeyword)
                    .AddParameterListParameters(
                        Parameter(Identifier("area")).WithType(SyntaxNodeHelpers.PredefinedStringType()),
                        Parameter(Identifier("controller")).WithType(SyntaxNodeHelpers.PredefinedStringType()),
                        Parameter(Identifier("action")).WithType(SyntaxNodeHelpers.PredefinedStringType()),
                        Parameter(Identifier("protocol")).WithType(SyntaxNodeHelpers.PredefinedStringType())
                            .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression))))
                    .WithBody(
                        Block(
                            ExpressionStatement(
                                InvocationExpression(
                                    SyntaxNodeHelpers.MemberAccess("this", "InitMVCT4Result"))
                                    .WithArgumentList(
                                        IdentifierName("area"),
                                        IdentifierName("controller"),
                                        IdentifierName("action"),
                                        IdentifierName("protocol"))))))
                .WithAutoStringProperty("Controller", SyntaxKind.PublicKeyword)
                .WithAutoStringProperty("Action", SyntaxKind.PublicKeyword)
                .WithAutoStringProperty("Protocol", SyntaxKind.PublicKeyword)
                .WithAutoProperty("RouteValueDictionary", IdentifierName("RouteValueDictionary"), SyntaxKind.PublicKeyword);

            var jsonResultClass = ClassDeclaration(Constants.JsonResultClass)
                .WithModifiers(SyntaxKind.InternalKeyword, SyntaxKind.PartialKeyword)
                .WithBaseTypes("JsonResult", "IR4MvcActionResult")
                .AddMembers(ConstructorDeclaration(Constants.JsonResultClass)
                    .WithModifiers(SyntaxKind.PublicKeyword)
                    .AddParameterListParameters(
                        Parameter(Identifier("area")).WithType(SyntaxNodeHelpers.PredefinedStringType()),
                        Parameter(Identifier("controller")).WithType(SyntaxNodeHelpers.PredefinedStringType()),
                        Parameter(Identifier("action")).WithType(SyntaxNodeHelpers.PredefinedStringType()),
                        Parameter(Identifier("protocol")).WithType(SyntaxNodeHelpers.PredefinedStringType())
                            .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression))))
                    .WithInitializer(ConstructorInitializer(SyntaxKind.BaseConstructorInitializer, ArgumentList(SingletonSeparatedList(Argument(LiteralExpression(SyntaxKind.NullLiteralExpression))))))
                    .WithBody(
                        Block(
                            ExpressionStatement(
                                InvocationExpression(
                                    SyntaxNodeHelpers.MemberAccess("this", "InitMVCT4Result"))
                                    .WithArgumentList(
                                        IdentifierName("area"),
                                        IdentifierName("controller"),
                                        IdentifierName("action"),
                                        IdentifierName("protocol"))))))
                .WithAutoStringProperty("Controller", SyntaxKind.PublicKeyword)
                .WithAutoStringProperty("Action", SyntaxKind.PublicKeyword)
                .WithAutoStringProperty("Protocol", SyntaxKind.PublicKeyword)
                .WithAutoProperty("RouteValueDictionary", IdentifierName("RouteValueDictionary"), SyntaxKind.PublicKeyword);

            var r4mvcNode = NewCompilationUnit()
                    .AddMembers(generatedControllers.Cast<MemberDeclarationSyntax>().ToArray())
                    .AddMembers(
                        staticFileNode,
                        r4Namespace,
                        mvcStaticClass,
                        actionResultClass,
                        jsonResultClass);
            CompleteAndWriteFile(r4mvcNode, Path.Combine(projectRoot, R4MvcGenerator.R4MvcFileName));
        }

        private string[] BuildAspNetMvcControllerMethodNames(CSharpCompilation compilation)
        {
            var controllerTypeSymbol = compilation.GetTypeByMetadataName("Microsoft.AspNetCore.Mvc.Controller");

            var result = new List<string>();
            var current = controllerTypeSymbol;
            while (current != null)
            {
                var methodNames = current.GetMembers().Where(r => r.Kind == SymbolKind.Method && r.DeclaredAccessibility == Accessibility.Public)
                    .Select(s => s.Name).ToList();
                result.AddRange(methodNames);
                current = current.BaseType;
            }

            return result.GroupBy(g => g).Select(s => s.Key).ToArray();
        }


        private CompilationUnitSyntax NewCompilationUnit()
        {
            // Create the root node and add usings, header, pragma
            return SyntaxFactory.CompilationUnit()
                    .WithUsings(
                        "System.CodeDom.Compiler",
                        "System.Diagnostics",
                        "System.Threading.Tasks",
                        "Microsoft.AspNetCore.Mvc",
                        "Microsoft.AspNetCore.Routing",
                        _settings.R4MvcNamespace)
                    .WithHeader(_headerText)
                    .WithPragmaCodes(false, pragmaCodes);
        }

        public void CompleteAndWriteFile(CompilationUnitSyntax contents, string filePath)
        {
            contents = contents
                .NormalizeWhitespace()
                // NOTE reenable pragma codes after normalizing whitespace or it doesn't place on newline
                .WithPragmaCodes(true, pragmaCodes);

            _filePersistService.WriteFile(contents, filePath);
        }
    }
}
